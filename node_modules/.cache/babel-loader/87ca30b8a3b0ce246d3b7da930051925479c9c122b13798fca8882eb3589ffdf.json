{"ast":null,"code":"var _jsxFileName = \"/Users/rohanbhalara/Desktop/Project/expense-sheet-generator/src/components/ExportExcel.js\";\nimport React from 'react';\nimport * as FileSaver from 'file-saver';\nimport XLSX from 'sheetjs-style';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ExportExcel(_ref) {\n  let {\n    excelData,\n    fileName\n  } = _ref;\n  const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n  const fileExtension = '.xlsx';\n  const exportToExcel = () => {\n    const ws = XLSX.utils.json_to_sheet(excelData);\n    const wb = {\n      Sheets: {\n        'data': ws\n      },\n      SheetNames: ['data']\n    };\n    const excelBuffer = XLSX.write(wb, {\n      bookType: 'xlsx',\n      type: 'array'\n    });\n    const data = new Blob([excelBuffer], {\n      type: fileType\n    });\n    FileSaver.saveAs(data, fileName + fileExtension);\n  };\n  return /*#__PURE__*/_jsxDEV(Button, {\n    variant: \"contained\",\n    onClick: e => exportToExcel(fileName),\n    children: \"Download\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n}\n_c = ExportExcel;\nexport default ExportExcel;\nvar _c;\n$RefreshReg$(_c, \"ExportExcel\");","map":{"version":3,"names":["React","FileSaver","XLSX","ExportExcel","excelData","fileName","fileType","fileExtension","exportToExcel","ws","utils","json_to_sheet","wb","Sheets","SheetNames","excelBuffer","write","bookType","type","data","Blob","saveAs","e"],"sources":["/Users/rohanbhalara/Desktop/Project/expense-sheet-generator/src/components/ExportExcel.js"],"sourcesContent":["import React from 'react'\nimport * as FileSaver from 'file-saver';\nimport XLSX from 'sheetjs-style';\n\nfunction ExportExcel({ excelData, fileName }) {\n    const fileType = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8';\n    const fileExtension = '.xlsx';\n\n    const exportToExcel = () => {\n        const ws = XLSX.utils.json_to_sheet(excelData);\n        const wb = { Sheets: { 'data': ws }, SheetNames: ['data'] };\n        const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });\n        const data = new Blob([excelBuffer], { type: fileType });\n        FileSaver.saveAs(data, fileName + fileExtension);\n    }\n\n    return (\n        <Button variant='contained' onClick={(e) => exportToExcel(fileName)}>Download</Button>\n    )\n}\n\nexport default ExportExcel"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,KAAKC,SAAS,MAAM,YAAY;AACvC,OAAOC,IAAI,MAAM,eAAe;AAAC;AAEjC,SAASC,WAAW,OAA0B;EAAA,IAAzB;IAAEC,SAAS;IAAEC;EAAS,CAAC;EACxC,MAAMC,QAAQ,GAAG,iFAAiF;EAClG,MAAMC,aAAa,GAAG,OAAO;EAE7B,MAAMC,aAAa,GAAG,MAAM;IACxB,MAAMC,EAAE,GAAGP,IAAI,CAACQ,KAAK,CAACC,aAAa,CAACP,SAAS,CAAC;IAC9C,MAAMQ,EAAE,GAAG;MAAEC,MAAM,EAAE;QAAE,MAAM,EAAEJ;MAAG,CAAC;MAAEK,UAAU,EAAE,CAAC,MAAM;IAAE,CAAC;IAC3D,MAAMC,WAAW,GAAGb,IAAI,CAACc,KAAK,CAACJ,EAAE,EAAE;MAAEK,QAAQ,EAAE,MAAM;MAAEC,IAAI,EAAE;IAAQ,CAAC,CAAC;IACvE,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACL,WAAW,CAAC,EAAE;MAAEG,IAAI,EAAEZ;IAAS,CAAC,CAAC;IACxDL,SAAS,CAACoB,MAAM,CAACF,IAAI,EAAEd,QAAQ,GAAGE,aAAa,CAAC;EACpD,CAAC;EAED,oBACI,QAAC,MAAM;IAAC,OAAO,EAAC,WAAW;IAAC,OAAO,EAAGe,CAAC,IAAKd,aAAa,CAACH,QAAQ,CAAE;IAAA,UAAC;EAAQ;IAAA;IAAA;IAAA;EAAA,QAAS;AAE9F;AAAC,KAfQF,WAAW;AAiBpB,eAAeA,WAAW;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}